/**
   BasicHTTPSClient.ino

    Created on: 20.08.2018

*/

#include <Arduino.h>
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <HX711.h>
#include <ESP8266HTTPClient.h>

#include <WiFiClientSecureBearSSL.h>
// Fingerprint for demo URL, expires on June 2, 2021, needs to be updated well before this date
//const uint8_t fingerprint[20] = {0x40, 0xaf, 0x00, 0x6b, 0xec, 0x90, 0x22, 0x41, 0x8e, 0xa3, 0xad, 0xfa, 0x1a, 0xe8, 0x25, 0x41, 0x1d, 0x1a, 0x54, 0xb3};

const int LOADCELL_DOUT_PIN = 12;
const int LOADCELL_SCK_PIN = 14;
HX711 scale;

float calibration_factor = 110000; // this calibration factor must be adjusted according to your load cell
float units;
float x;
float percentage;

int cal(){
  x = units/20;
  percentage = x * 100;  
  }

ESP8266WiFiMulti WiFiMulti;

void setup() {
  Serial.begin(115200);
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.set_scale(calibration_factor);
  scale.tare(); //Reset the scale to 0
  long zero_factor = scale.read_average(); //Get a baseline reading
  // Serial.setDebugOutput(true);

  Serial.println();
  Serial.println();
  Serial.println();

  for (uint8_t t = 4; t > 0; t--) {
    Serial.printf("[SETUP] WAIT %d...\n", t);
    Serial.flush();
    delay(1000);
  }

  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP("HGU-MJM-NETWORK", "F@m1ly@43v3r");
}

void loop() {
  // wait for WiFi connection
  if ((WiFiMulti.run() == WL_CONNECTED)) {

    std::unique_ptr<BearSSL::WiFiClientSecure>client(new BearSSL::WiFiClientSecure);

    //client->setFingerprint(fingerprint);
    client->setInsecure();

    HTTPClient https;

    Serial.print("[HTTPS] begin...\n");
    if (https.begin(*client, "https://pq38i6wtd4.execute-api.ap-southeast-1.amazonaws.com/verkoapi/data/m2")) {  // HTTPS

      Serial.print("[HTTPS] POST...\n");
      // start connection and send HTTP header
      units = scale.get_units(), 5;
      if (units < 0)
      {
      units = 0.00;
      }
      int result = 0;
      result = cal();
      DynamicJsonDocument doc(1024);
    
      doc["id"] = "m2";
      doc["email"]   = "cj@verko.com";
      doc["exercise"] = "0";
      doc["percentage"] = units;
      doc["reps"] = "0";
    
      String json;
      serializeJson(doc, json);
      https.addHeader("Content-Type", "application/json");
      int httpCode = https.POST(json);// httpCode will be negative on error
      if (httpCode > 0) {
        // HTTP header has been send and Server response header has been handled
        Serial.printf("[HTTPS] POST... code: %d\n", httpCode);
        Serial.print(units);

        // file found at server
        if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
          String payload = https.getString();
          Serial.println(payload);
        }
      } else {
        Serial.printf("[HTTPS] POST... failed, error: %s\n", https.errorToString(httpCode).c_str());
      }

      https.end();
    } else {
      Serial.printf("[HTTPS] Unable to connect\n");
    }
  }

  Serial.println("Wait 10s before next round...");
  delay(100);
}